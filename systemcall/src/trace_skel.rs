// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::absolute_paths)]
#[allow(clippy::upper_case_acronyms)]
#[allow(clippy::zero_repeat_side_effects)]
#[warn(single_use_lifetimes)]
mod imp {
    #[allow(unused_imports)]
    use super::*;
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;
    use libbpf_rs::AsRawLibbpf as _;
    use libbpf_rs::MapCore as _;
    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("systemcall_bpf")
            .map("filter_pid", false)
            .map("events", false)
            .prog("trace_sys_enter");
        builder.build()
    }
    pub struct OpenSystemcallMaps<'obj> {
        pub filter_pid: libbpf_rs::OpenMapMut<'obj>,
        pub events: libbpf_rs::OpenMapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenSystemcallMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::OpenObject,
        ) -> libbpf_rs::Result<Self> {
            let mut filter_pid = None;
            let mut events = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "filter_pid" => filter_pid = Some(map),
                    "events" => events = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                filter_pid: filter_pid.expect("map `filter_pid` not present"),
                events: events.expect("map `events` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct SystemcallMaps<'obj> {
        pub filter_pid: libbpf_rs::MapMut<'obj>,
        pub events: libbpf_rs::MapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> SystemcallMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::Object,
        ) -> libbpf_rs::Result<Self> {
            let mut filter_pid = None;
            let mut events = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::Object, &'obj mut libbpf_rs::Object>(object)
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "filter_pid" => filter_pid = Some(map),
                    "events" => events = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                filter_pid: filter_pid.expect("map `filter_pid` not present"),
                events: events.expect("map `events` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct OpenSystemcallProgs<'obj> {
        pub trace_sys_enter: libbpf_rs::OpenProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenSystemcallProgs<'obj> {
        unsafe fn new(object: &mut libbpf_rs::OpenObject) -> libbpf_rs::Result<Self> {
            let mut trace_sys_enter = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            for prog in object.progs_mut() {
                let name = prog.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "prog has invalid name",
                    ))
                })?;
                match name {
                    "trace_sys_enter" => trace_sys_enter = Some(prog),
                    _ => panic!("encountered unexpected prog: `{name}`"),
                }
            }

            let slf = Self {
                trace_sys_enter: trace_sys_enter.expect("prog `trace_sys_enter` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct SystemcallProgs<'obj> {
        pub trace_sys_enter: libbpf_rs::ProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> SystemcallProgs<'obj> {
        #[allow(unused_variables)]
        fn new(open_progs: OpenSystemcallProgs<'obj>) -> Self {
            Self {
                trace_sys_enter: unsafe {
                    libbpf_rs::ProgramMut::new_mut(
                        open_progs.trace_sys_enter.as_libbpf_object().as_mut(),
                    )
                },
                _phantom: std::marker::PhantomData,
            }
        }
    }
    struct OwnedRef<'obj, O> {
        object: Option<&'obj mut std::mem::MaybeUninit<O>>,
    }

    impl<'obj, O> OwnedRef<'obj, O> {
        /// # Safety
        /// The object has to be initialized.
        unsafe fn new(object: &'obj mut std::mem::MaybeUninit<O>) -> Self {
            Self {
                object: Some(object),
            }
        }

        fn as_ref(&self) -> &O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_ref().unwrap().assume_init_ref() }
        }

        fn as_mut(&mut self) -> &mut O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_mut().unwrap().assume_init_mut() }
        }

        fn take(mut self) -> &'obj mut std::mem::MaybeUninit<O> {
            self.object.take().unwrap()
        }
    }

    impl<O> Drop for OwnedRef<'_, O> {
        fn drop(&mut self) {
            if let Some(object) = &mut self.object {
                unsafe { object.assume_init_drop() }
            }
        }
    }

    #[derive(Default)]
    pub struct SystemcallSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'obj> SystemcallSkelBuilder {
        fn open_opts_impl(
            self,
            open_opts: *const libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenSystemcallSkel<'obj>> {
            let skel_config = build_skel_config()?;
            let skel_ptr = skel_config.as_libbpf_object();

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_ptr.as_ptr(), open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            // SAFETY: `skel_ptr` points to a valid object after the
            //         open call.
            let obj_ptr = unsafe { *skel_ptr.as_ref().obj };
            // SANITY: `bpf_object__open_skeleton` should have
            //         allocated the object.
            let obj_ptr = std::ptr::NonNull::new(obj_ptr).unwrap();
            // SAFETY: `obj_ptr` points to an opened object after
            //         skeleton open.
            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(obj_ptr) };
            let _obj = object.write(obj);
            // SAFETY: We just wrote initialized data to `object`.
            let mut obj_ref = unsafe { OwnedRef::new(object) };

            #[allow(unused_mut)]
            let mut skel = OpenSystemcallSkel {
                maps: unsafe { OpenSystemcallMaps::new(&skel_config, obj_ref.as_mut())? },
                progs: unsafe { OpenSystemcallProgs::new(obj_ref.as_mut())? },
                obj: obj_ref,
                // SAFETY: Our `struct_ops` type contains only pointers,
                //         which are allowed to be NULL.
                // TODO: Generate and use a `Default` representation
                //       instead, to cut down on unsafe code.
                struct_ops: unsafe { std::mem::zeroed() },
                skel_config,
            };

            Ok(skel)
        }
    }

    impl<'obj> SkelBuilder<'obj> for SystemcallSkelBuilder {
        type Output = OpenSystemcallSkel<'obj>;
        fn open(
            self,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenSystemcallSkel<'obj>> {
            self.open_opts_impl(std::ptr::null(), object)
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenSystemcallSkel<'obj>> {
            self.open_opts_impl(&open_opts, object)
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    #[derive(Debug, Clone)]
    #[repr(C)]
    pub struct StructOps {}

    impl StructOps {}
    pub mod types {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_1 {
            pub r#type: *mut [i32; 2],
            pub max_entries: *mut [i32; 1],
            pub key: *mut u32,
            pub value: *mut u32,
        }
        impl Default for __anon_1 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                    max_entries: std::ptr::null_mut(),
                    key: std::ptr::null_mut(),
                    value: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_2 {
            pub r#type: *mut [i32; 4],
        }
        impl Default for __anon_2 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct trace_event_raw_sys_enter {
            pub ent: trace_entry,
            pub id: i64,
            pub args: [u64; 6],
            pub __data: [i8; 0],
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct trace_entry {
            pub r#type: u16,
            pub flags: u8,
            pub preempt_count: u8,
            pub pid: i32,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct maps {
            pub filter_pid: __anon_1,
            pub events: __anon_2,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct license {
            pub LICENSE: [i8; 4],
        }
    }
    pub struct OpenSystemcallSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::OpenObject>,
        pub maps: OpenSystemcallMaps<'obj>,
        pub progs: OpenSystemcallProgs<'obj>,
        pub struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
    }

    impl<'obj> OpenSkel<'obj> for OpenSystemcallSkel<'obj> {
        type Output = SystemcallSkel<'obj>;
        fn load(self) -> libbpf_rs::Result<SystemcallSkel<'obj>> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();

            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            let obj_ref = self.obj.take();
            let open_obj = std::mem::replace(obj_ref, std::mem::MaybeUninit::uninit());
            // SAFETY: `open_obj` is guaranteed to be properly
            //         initialized as it came from an `OwnedRef`.
            let obj_ptr = unsafe { open_obj.assume_init().take_ptr() };
            // SAFETY: `obj_ptr` points to a loaded object after
            //         skeleton load.
            let obj = unsafe { libbpf_rs::Object::from_ptr(obj_ptr) };
            // SAFETY: `OpenObject` and `Object` are guaranteed to
            //         have the same memory layout.
            let obj_ref = unsafe {
                std::mem::transmute::<
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::Object>,
                >(obj_ref)
            };
            let _obj = obj_ref.write(obj);
            // SAFETY: We just wrote initialized data to `obj_ref`.
            let mut obj_ref = unsafe { OwnedRef::new(obj_ref) };

            Ok(SystemcallSkel {
                maps: unsafe { SystemcallMaps::new(&self.skel_config, obj_ref.as_mut())? },
                progs: SystemcallProgs::new(self.progs),
                obj: obj_ref,
                struct_ops: self.struct_ops,
                skel_config: self.skel_config,
                links: SystemcallLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            self.obj.as_ref()
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            self.obj.as_mut()
        }
    }
    #[derive(Default)]
    pub struct SystemcallLinks {
        pub trace_sys_enter: Option<libbpf_rs::Link>,
    }
    pub struct SystemcallSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::Object>,
        pub maps: SystemcallMaps<'obj>,
        pub progs: SystemcallProgs<'obj>,
        struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
        pub links: SystemcallLinks,
    }

    unsafe impl Send for SystemcallSkel<'_> {}
    unsafe impl Sync for SystemcallSkel<'_> {}

    impl<'obj> Skel<'obj> for SystemcallSkel<'obj> {
        fn object(&self) -> &libbpf_rs::Object {
            self.obj.as_ref()
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            self.obj.as_mut()
        }
        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            self.links = SystemcallLinks {
                trace_sys_enter: core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                    .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }),
            };

            Ok(())
        }
    }
    impl SystemcallSkel<'_> {
        pub fn struct_ops_raw(&self) -> *const StructOps {
            &self.struct_ops
        }

        pub fn struct_ops(&self) -> &StructOps {
            &self.struct_ops
        }
    }
    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 9, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97, 98,
        0, 116, 114, 97, 99, 101, 112, 111, 105, 110, 116, 47, 115, 121, 115, 99, 97, 108, 108,
        115, 47, 115, 121, 115, 95, 101, 110, 116, 101, 114, 0, 46, 109, 97, 112, 115, 0, 108, 105,
        99, 101, 110, 115, 101, 0, 115, 121, 115, 116, 101, 109, 99, 97, 108, 108, 46, 98, 112,
        102, 46, 99, 0, 116, 114, 97, 99, 101, 95, 115, 121, 115, 95, 101, 110, 116, 101, 114, 0,
        102, 105, 108, 116, 101, 114, 95, 112, 105, 100, 0, 101, 118, 101, 110, 116, 115, 0, 76,
        73, 67, 69, 78, 83, 69, 0, 46, 114, 101, 108, 116, 114, 97, 99, 101, 112, 111, 105, 110,
        116, 47, 115, 121, 115, 99, 97, 108, 108, 115, 47, 115, 121, 115, 95, 101, 110, 116, 101,
        114, 0, 46, 66, 84, 70, 0, 46, 66, 84, 70, 46, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 78, 0, 0, 0, 18, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 1, 0, 0, 0, 0, 0, 0, 94,
        0, 0, 0, 17, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 17, 0,
        4, 0, 32, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 17, 0, 5, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 191, 22, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 14, 0, 0,
        0, 191, 7, 0, 0, 0, 0, 0, 0, 183, 1, 0, 0, 0, 0, 0, 0, 99, 26, 252, 255, 0, 0, 0, 0, 191,
        162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 252, 255, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 133, 0, 0, 0, 1, 0, 0, 0, 21, 0, 26, 0, 0, 0, 0, 0, 191, 120, 0, 0, 0, 0, 0, 0,
        119, 8, 0, 0, 32, 0, 0, 0, 97, 1, 0, 0, 0, 0, 0, 0, 93, 129, 22, 0, 0, 0, 0, 0, 183, 1, 0,
        0, 0, 0, 0, 0, 123, 26, 240, 255, 0, 0, 0, 0, 123, 26, 232, 255, 0, 0, 0, 0, 133, 0, 0, 0,
        5, 0, 0, 0, 99, 122, 220, 255, 0, 0, 0, 0, 99, 138, 216, 255, 0, 0, 0, 0, 123, 10, 208,
        255, 0, 0, 0, 0, 121, 97, 8, 0, 0, 0, 0, 0, 123, 26, 224, 255, 0, 0, 0, 0, 191, 161, 0, 0,
        0, 0, 0, 0, 7, 1, 0, 0, 232, 255, 255, 255, 183, 2, 0, 0, 16, 0, 0, 0, 133, 0, 0, 0, 16, 0,
        0, 0, 191, 164, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 208, 255, 255, 255, 191, 97, 0, 0, 0, 0, 0,
        0, 24, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 3, 0, 0, 255, 255, 255, 255, 0, 0,
        0, 0, 0, 0, 0, 0, 183, 5, 0, 0, 40, 0, 0, 0, 133, 0, 0, 0, 25, 0, 0, 0, 183, 0, 0, 0, 0, 0,
        0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 80, 76, 0, 0, 0, 0, 0, 56,
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 248, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0,
        0, 159, 235, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 188, 2, 0, 0, 188, 2, 0, 0, 164, 3, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 4, 0,
        0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0,
        2, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 25, 0, 0, 0, 0, 0,
        0, 8, 9, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 8, 10, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0,
        0, 32, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 32, 0, 0, 0, 48, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        53, 0, 0, 0, 5, 0, 0, 0, 64, 0, 0, 0, 65, 0, 0, 0, 7, 0, 0, 0, 128, 0, 0, 0, 69, 0, 0, 0,
        7, 0, 0, 0, 192, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 14, 11, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 2, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0,
        0, 0, 0, 0, 0, 1, 0, 0, 4, 8, 0, 0, 0, 48, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
        0, 0, 0, 14, 15, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 18, 0, 0, 0, 93, 0, 0, 0, 4,
        0, 0, 4, 64, 0, 0, 0, 119, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 22, 0, 0, 0, 64,
        0, 0, 0, 126, 0, 0, 0, 24, 0, 0, 0, 128, 0, 0, 0, 131, 0, 0, 0, 26, 0, 0, 0, 0, 2, 0, 0,
        138, 0, 0, 0, 4, 0, 0, 4, 8, 0, 0, 0, 48, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0,
        21, 0, 0, 0, 16, 0, 0, 0, 156, 0, 0, 0, 21, 0, 0, 0, 24, 0, 0, 0, 170, 0, 0, 0, 2, 0, 0, 0,
        32, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 16, 0, 0, 0, 189, 0, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 8, 0, 0, 0, 203, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 1, 208, 0, 0, 0, 0,
        0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 23, 0, 0, 0, 4, 0, 0,
        0, 6, 0, 0, 0, 222, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0,
        0, 0, 0, 25, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 2, 0, 0, 0, 227, 0,
        0, 0, 17, 0, 0, 0, 231, 0, 0, 0, 1, 0, 0, 12, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0,
        0, 25, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 247, 0, 0, 0, 0, 0, 0, 14, 29, 0, 0, 0, 1, 0, 0, 0,
        120, 3, 0, 0, 2, 0, 0, 15, 40, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 16, 0, 0, 0,
        32, 0, 0, 0, 8, 0, 0, 0, 126, 3, 0, 0, 1, 0, 0, 15, 4, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 4,
        0, 0, 0, 0, 105, 110, 116, 0, 95, 95, 65, 82, 82, 65, 89, 95, 83, 73, 90, 69, 95, 84, 89,
        80, 69, 95, 95, 0, 117, 51, 50, 0, 95, 95, 117, 51, 50, 0, 117, 110, 115, 105, 103, 110,
        101, 100, 32, 105, 110, 116, 0, 116, 121, 112, 101, 0, 109, 97, 120, 95, 101, 110, 116,
        114, 105, 101, 115, 0, 107, 101, 121, 0, 118, 97, 108, 117, 101, 0, 102, 105, 108, 116,
        101, 114, 95, 112, 105, 100, 0, 101, 118, 101, 110, 116, 115, 0, 116, 114, 97, 99, 101, 95,
        101, 118, 101, 110, 116, 95, 114, 97, 119, 95, 115, 121, 115, 95, 101, 110, 116, 101, 114,
        0, 101, 110, 116, 0, 105, 100, 0, 97, 114, 103, 115, 0, 95, 95, 100, 97, 116, 97, 0, 116,
        114, 97, 99, 101, 95, 101, 110, 116, 114, 121, 0, 102, 108, 97, 103, 115, 0, 112, 114, 101,
        101, 109, 112, 116, 95, 99, 111, 117, 110, 116, 0, 112, 105, 100, 0, 117, 110, 115, 105,
        103, 110, 101, 100, 32, 115, 104, 111, 114, 116, 0, 117, 110, 115, 105, 103, 110, 101, 100,
        32, 99, 104, 97, 114, 0, 108, 111, 110, 103, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32,
        108, 111, 110, 103, 0, 99, 104, 97, 114, 0, 99, 116, 120, 0, 116, 114, 97, 99, 101, 95,
        115, 121, 115, 95, 101, 110, 116, 101, 114, 0, 76, 73, 67, 69, 78, 83, 69, 0, 47, 104, 111,
        109, 101, 47, 108, 117, 120, 105, 97, 110, 47, 103, 105, 116, 104, 117, 98, 47, 103, 111,
        108, 97, 110, 103, 95, 99, 97, 108, 108, 95, 116, 114, 97, 99, 101, 47, 115, 121, 115, 116,
        101, 109, 99, 97, 108, 108, 47, 115, 114, 99, 47, 98, 112, 102, 47, 115, 121, 115, 116,
        101, 109, 99, 97, 108, 108, 46, 98, 112, 102, 46, 99, 0, 105, 110, 116, 32, 116, 114, 97,
        99, 101, 95, 115, 121, 115, 95, 101, 110, 116, 101, 114, 40, 115, 116, 114, 117, 99, 116,
        32, 116, 114, 97, 99, 101, 95, 101, 118, 101, 110, 116, 95, 114, 97, 119, 95, 115, 121,
        115, 95, 101, 110, 116, 101, 114, 32, 42, 99, 116, 120, 41, 32, 123, 0, 32, 32, 32, 32,
        117, 54, 52, 32, 112, 105, 100, 95, 116, 103, 105, 100, 32, 61, 32, 98, 112, 102, 95, 103,
        101, 116, 95, 99, 117, 114, 114, 101, 110, 116, 95, 112, 105, 100, 95, 116, 103, 105, 100,
        40, 41, 59, 0, 32, 32, 32, 32, 117, 51, 50, 32, 107, 101, 121, 32, 61, 32, 48, 59, 0, 32,
        32, 32, 32, 117, 51, 50, 32, 42, 116, 97, 114, 103, 101, 116, 32, 61, 32, 98, 112, 102, 95,
        109, 97, 112, 95, 108, 111, 111, 107, 117, 112, 95, 101, 108, 101, 109, 40, 38, 102, 105,
        108, 116, 101, 114, 95, 112, 105, 100, 44, 32, 38, 107, 101, 121, 41, 59, 0, 32, 32, 32,
        32, 105, 102, 32, 40, 33, 116, 97, 114, 103, 101, 116, 32, 124, 124, 32, 112, 105, 100, 32,
        33, 61, 32, 42, 116, 97, 114, 103, 101, 116, 41, 0, 32, 32, 32, 32, 115, 116, 114, 117, 99,
        116, 32, 101, 118, 101, 110, 116, 95, 116, 32, 101, 118, 116, 32, 61, 32, 123, 125, 59, 0,
        32, 32, 32, 32, 101, 118, 116, 46, 116, 115, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32,
        98, 112, 102, 95, 107, 116, 105, 109, 101, 95, 103, 101, 116, 95, 110, 115, 40, 41, 59, 0,
        32, 32, 32, 32, 101, 118, 116, 46, 116, 105, 100, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32,
        40, 117, 51, 50, 41, 112, 105, 100, 95, 116, 103, 105, 100, 59, 0, 32, 32, 32, 32, 101,
        118, 116, 46, 112, 105, 100, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 112, 105, 100, 59, 0,
        32, 32, 32, 32, 101, 118, 116, 46, 115, 121, 115, 99, 97, 108, 108, 95, 105, 100, 32, 61,
        32, 99, 116, 120, 45, 62, 105, 100, 59, 32, 32, 47, 47, 32, 99, 116, 120, 45, 62, 105, 100,
        32, 230, 157, 165, 232, 135, 170, 32, 118, 109, 108, 105, 110, 117, 120, 46, 104, 32, 228,
        184, 173, 229, 174, 154, 228, 185, 137, 0, 32, 32, 32, 32, 98, 112, 102, 95, 103, 101, 116,
        95, 99, 117, 114, 114, 101, 110, 116, 95, 99, 111, 109, 109, 40, 38, 101, 118, 116, 46, 99,
        111, 109, 109, 44, 32, 115, 105, 122, 101, 111, 102, 40, 101, 118, 116, 46, 99, 111, 109,
        109, 41, 41, 59, 0, 32, 32, 32, 32, 98, 112, 102, 95, 112, 101, 114, 102, 95, 101, 118,
        101, 110, 116, 95, 111, 117, 116, 112, 117, 116, 40, 99, 116, 120, 44, 32, 38, 101, 118,
        101, 110, 116, 115, 44, 32, 66, 80, 70, 95, 70, 95, 67, 85, 82, 82, 69, 78, 84, 95, 67, 80,
        85, 44, 32, 38, 101, 118, 116, 44, 32, 115, 105, 122, 101, 111, 102, 40, 101, 118, 116, 41,
        41, 59, 0, 125, 0, 48, 58, 49, 0, 46, 109, 97, 112, 115, 0, 108, 105, 99, 101, 110, 115,
        101, 0, 116, 114, 97, 99, 101, 112, 111, 105, 110, 116, 47, 115, 121, 115, 99, 97, 108,
        108, 115, 47, 115, 121, 115, 95, 101, 110, 116, 101, 114, 0, 159, 235, 1, 0, 32, 0, 0, 0,
        0, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 44, 1, 0, 0, 64, 1, 0, 0, 28, 0, 0, 0, 8, 0, 0, 0,
        134, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 16, 0, 0, 0, 134, 3, 0, 0, 18, 0, 0, 0,
        0, 0, 0, 0, 255, 0, 0, 0, 73, 1, 0, 0, 0, 108, 0, 0, 8, 0, 0, 0, 255, 0, 0, 0, 134, 1, 0,
        0, 20, 112, 0, 0, 32, 0, 0, 0, 255, 0, 0, 0, 181, 1, 0, 0, 9, 120, 0, 0, 56, 0, 0, 0, 255,
        0, 0, 0, 198, 1, 0, 0, 19, 132, 0, 0, 80, 0, 0, 0, 255, 0, 0, 0, 0, 2, 0, 0, 17, 136, 0, 0,
        104, 0, 0, 0, 255, 0, 0, 0, 0, 2, 0, 0, 27, 136, 0, 0, 112, 0, 0, 0, 255, 0, 0, 0, 0, 2, 0,
        0, 9, 136, 0, 0, 128, 0, 0, 0, 255, 0, 0, 0, 35, 2, 0, 0, 20, 148, 0, 0, 144, 0, 0, 0, 255,
        0, 0, 0, 64, 2, 0, 0, 22, 152, 0, 0, 152, 0, 0, 0, 255, 0, 0, 0, 105, 2, 0, 0, 20, 160, 0,
        0, 160, 0, 0, 0, 255, 0, 0, 0, 141, 2, 0, 0, 20, 156, 0, 0, 168, 0, 0, 0, 255, 0, 0, 0, 64,
        2, 0, 0, 20, 152, 0, 0, 176, 0, 0, 0, 255, 0, 0, 0, 167, 2, 0, 0, 27, 164, 0, 0, 184, 0, 0,
        0, 255, 0, 0, 0, 167, 2, 0, 0, 20, 164, 0, 0, 192, 0, 0, 0, 255, 0, 0, 0, 35, 2, 0, 0, 20,
        148, 0, 0, 208, 0, 0, 0, 255, 0, 0, 0, 236, 2, 0, 0, 5, 168, 0, 0, 240, 0, 0, 0, 255, 0, 0,
        0, 35, 3, 0, 0, 5, 176, 0, 0, 40, 1, 0, 0, 255, 0, 0, 0, 114, 3, 0, 0, 1, 184, 0, 0, 16, 0,
        0, 0, 134, 3, 0, 0, 1, 0, 0, 0, 176, 0, 0, 0, 18, 0, 0, 0, 116, 3, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        64, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 232, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 1, 0, 0, 0, 0, 0, 0, 56, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 1, 0, 0, 0, 3,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 2, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0,
        1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 2, 0, 0, 0, 0, 0, 0, 4, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        120, 0, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 2, 0, 0, 0,
        0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0,
        0, 0, 0, 0, 0, 154, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        24, 3, 0, 0, 0, 0, 0, 0, 120, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 144, 9, 0, 0, 0, 0, 0, 0, 124, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
}
